; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -mtriple=powerpc-unknown-linux-gnu -mcpu=ppc64 < %s | FileCheck -check-prefixes=CHECK,CHECK64 %s
; RUN: llc -verify-machineinstrs -mtriple=powerpc-unknown-linux-gnu -mcpu=ppc < %s | FileCheck -check-prefixes=CHECK,CHECK32 %s

define i32 @lower_srem_positive_odd(i32 %x) {
; CHECK-LABEL: lower_srem_positive_odd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lis 4, -21386
; CHECK-NEXT:    ori 4, 4, 37253
; CHECK-NEXT:    mulhw 4, 3, 4
; CHECK-NEXT:    add 4, 4, 3
; CHECK-NEXT:    srwi 5, 4, 31
; CHECK-NEXT:    srawi 4, 4, 6
; CHECK-NEXT:    add 4, 4, 5
; CHECK-NEXT:    mulli 4, 4, 95
; CHECK-NEXT:    subf 3, 4, 3
; CHECK-NEXT:    blr
  %1 = srem i32 %x, 95
  ret i32 %1
}


define i32 @lower_srem_positive_even(i32 %x) {
; CHECK-LABEL: lower_srem_positive_even:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lis 4, 15827
; CHECK-NEXT:    ori 4, 4, 36849
; CHECK-NEXT:    mulhw 4, 3, 4
; CHECK-NEXT:    srwi 5, 4, 31
; CHECK-NEXT:    srawi 4, 4, 8
; CHECK-NEXT:    add 4, 4, 5
; CHECK-NEXT:    mulli 4, 4, 1060
; CHECK-NEXT:    subf 3, 4, 3
; CHECK-NEXT:    blr
  %1 = srem i32 %x, 1060
  ret i32 %1
}


define i32 @lower_srem_negative_odd(i32 %x) {
; CHECK-LABEL: lower_srem_negative_odd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lis 4, -23206
; CHECK-NEXT:    ori 4, 4, 65445
; CHECK-NEXT:    mulhw 4, 3, 4
; CHECK-NEXT:    srwi 5, 4, 31
; CHECK-NEXT:    srawi 4, 4, 8
; CHECK-NEXT:    add 4, 4, 5
; CHECK-NEXT:    mulli 4, 4, -723
; CHECK-NEXT:    subf 3, 4, 3
; CHECK-NEXT:    blr
  %1 = srem i32 %x, -723
  ret i32 %1
}


define i32 @lower_srem_negative_even(i32 %x) {
; CHECK-LABEL: lower_srem_negative_even:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lis 4, -731
; CHECK-NEXT:    ori 4, 4, 62439
; CHECK-NEXT:    mulhw 4, 3, 4
; CHECK-NEXT:    srwi 5, 4, 31
; CHECK-NEXT:    srawi 4, 4, 8
; CHECK-NEXT:    add 4, 4, 5
; CHECK-NEXT:    mulli 4, 4, -22981
; CHECK-NEXT:    subf 3, 4, 3
; CHECK-NEXT:    blr
  %1 = srem i32 %x, -22981
  ret i32 %1
}


; Don't lower if we can combine srem with sdiv.
define i32 @combine_srem_sdiv(i32 %x) {
; CHECK-LABEL: combine_srem_sdiv:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lis 4, -21386
; CHECK-NEXT:    ori 4, 4, 37253
; CHECK-NEXT:    mulhw 4, 3, 4
; CHECK-NEXT:    add 4, 4, 3
; CHECK-NEXT:    srwi 5, 4, 31
; CHECK-NEXT:    srawi 4, 4, 6
; CHECK-NEXT:    add 4, 4, 5
; CHECK-NEXT:    mulli 5, 4, 95
; CHECK-NEXT:    subf 3, 5, 3
; CHECK-NEXT:    add 3, 3, 4
; CHECK-NEXT:    blr
  %1 = srem i32 %x, 95
  %2 = sdiv i32 %x, 95
  %3 = add i32 %1, %2
  ret i32 %3
}

; Don't lower for divisors that are a power of two.
define i32 @dont_lower_srem_power_of_two(i32 %x) {
; CHECK-LABEL: dont_lower_srem_power_of_two:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srawi 4, 3, 6
; CHECK-NEXT:    addze 4, 4
; CHECK-NEXT:    slwi 4, 4, 6
; CHECK-NEXT:    subf 3, 4, 3
; CHECK-NEXT:    blr
  %1 = srem i32 %x, 64
  ret i32 %1
}

; Don't lower if the divisor is one.
define i32 @dont_lower_srem_one(i32 %x) {
; CHECK-LABEL: dont_lower_srem_one:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li 3, 0
; CHECK-NEXT:    blr
  %1 = srem i32 %x, 1
  ret i32 %1
}

; Don't lower if the divisor is 2^31.
define i32 @dont_lower_srem_i32_smax(i32 %x) {
; CHECK-LABEL: dont_lower_srem_i32_smax:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srawi 4, 3, 31
; CHECK-NEXT:    addze 4, 4
; CHECK-NEXT:    slwi 4, 4, 31
; CHECK-NEXT:    add 3, 3, 4
; CHECK-NEXT:    blr
  %1 = srem i32 %x, 2147483648
  ret i32 %1
}

; Don't lower i64 srem
define i64 @dont_lower_srem_i64(i64 %x) {
; CHECK-LABEL: dont_lower_srem_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mflr 0
; CHECK-NEXT:    stw 0, 4(1)
; CHECK-NEXT:    stwu 1, -16(1)
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset lr, 4
; CHECK-NEXT:    li 5, 0
; CHECK-NEXT:    li 6, 98
; CHECK-NEXT:    bl __moddi3@PLT
; CHECK-NEXT:    lwz 0, 20(1)
; CHECK-NEXT:    addi 1, 1, 16
; CHECK-NEXT:    mtlr 0
; CHECK-NEXT:    blr
  %1 = srem i64 %x, 98
  ret i64 %1
}

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

define void @srem_loop(i32 %x) {
; CHECK64-LABEL: srem_loop:
; CHECK64:       # %bb.0: # %entry
; CHECK64-NEXT:    mflr 0
; CHECK64-NEXT:    stw 0, 4(1)
; CHECK64-NEXT:    stwu 1, -32(1)
; CHECK64-NEXT:    .cfi_def_cfa_offset 32
; CHECK64-NEXT:    .cfi_offset lr, 4
; CHECK64-NEXT:    .cfi_offset r27, -20
; CHECK64-NEXT:    .cfi_offset r28, -16
; CHECK64-NEXT:    .cfi_offset r29, -12
; CHECK64-NEXT:    .cfi_offset r30, -8
; CHECK64-NEXT:    lis 4, -21386
; CHECK64-NEXT:    lis 5, .L.str@ha
; CHECK64-NEXT:    stw 27, 12(1) # 4-byte Folded Spill
; CHECK64-NEXT:    ori 27, 4, 37253
; CHECK64-NEXT:    stw 28, 16(1) # 4-byte Folded Spill
; CHECK64-NEXT:    la 28, .L.str@l(5)
; CHECK64-NEXT:    stw 29, 20(1) # 4-byte Folded Spill
; CHECK64-NEXT:    li 29, 0
; CHECK64-NEXT:    stw 30, 24(1) # 4-byte Folded Spill
; CHECK64-NEXT:    mr 30, 3
; CHECK64-NEXT:    li 3, 1
; CHECK64-NEXT:  .LBB9_1: # %loop
; CHECK64-NEXT:    #
; CHECK64-NEXT:    mulhw 4, 3, 27
; CHECK64-NEXT:    crxor 6, 6, 6
; CHECK64-NEXT:    add 4, 4, 3
; CHECK64-NEXT:    srwi 5, 4, 31
; CHECK64-NEXT:    srawi 4, 4, 6
; CHECK64-NEXT:    add 4, 4, 5
; CHECK64-NEXT:    mulli 4, 4, 95
; CHECK64-NEXT:    subf 3, 4, 3
; CHECK64-NEXT:    add 29, 3, 29
; CHECK64-NEXT:    mr 3, 28
; CHECK64-NEXT:    mr 4, 29
; CHECK64-NEXT:    bl printf
; CHECK64-NEXT:    cmplw 3, 30
; CHECK64-NEXT:    blt 0, .LBB9_1
; CHECK64-NEXT:  # %bb.2: # %afterloop
; CHECK64-NEXT:    lwz 30, 24(1) # 4-byte Folded Reload
; CHECK64-NEXT:    lwz 29, 20(1) # 4-byte Folded Reload
; CHECK64-NEXT:    lwz 28, 16(1) # 4-byte Folded Reload
; CHECK64-NEXT:    lwz 27, 12(1) # 4-byte Folded Reload
; CHECK64-NEXT:    lwz 0, 36(1)
; CHECK64-NEXT:    addi 1, 1, 32
; CHECK64-NEXT:    mtlr 0
; CHECK64-NEXT:    blr
;
; CHECK32-LABEL: srem_loop:
; CHECK32:       # %bb.0: # %entry
; CHECK32-NEXT:    mflr 0
; CHECK32-NEXT:    stw 0, 4(1)
; CHECK32-NEXT:    stwu 1, -32(1)
; CHECK32-NEXT:    .cfi_def_cfa_offset 32
; CHECK32-NEXT:    .cfi_offset lr, 4
; CHECK32-NEXT:    .cfi_offset r27, -20
; CHECK32-NEXT:    .cfi_offset r28, -16
; CHECK32-NEXT:    .cfi_offset r29, -12
; CHECK32-NEXT:    .cfi_offset r30, -8
; CHECK32-NEXT:    lis 4, -21386
; CHECK32-NEXT:    lis 5, .L.str@ha
; CHECK32-NEXT:    stw 27, 12(1) # 4-byte Folded Spill
; CHECK32-NEXT:    stw 28, 16(1) # 4-byte Folded Spill
; CHECK32-NEXT:    stw 29, 20(1) # 4-byte Folded Spill
; CHECK32-NEXT:    stw 30, 24(1) # 4-byte Folded Spill
; CHECK32-NEXT:    mr 30, 3
; CHECK32-NEXT:    li 29, 0
; CHECK32-NEXT:    li 3, 1
; CHECK32-NEXT:    ori 27, 4, 37253
; CHECK32-NEXT:    la 28, .L.str@l(5)
; CHECK32-NEXT:  .LBB9_1: # %loop
; CHECK32-NEXT:    #
; CHECK32-NEXT:    mulhw 4, 3, 27
; CHECK32-NEXT:    add 4, 4, 3
; CHECK32-NEXT:    srwi 5, 4, 31
; CHECK32-NEXT:    srawi 4, 4, 6
; CHECK32-NEXT:    add 4, 4, 5
; CHECK32-NEXT:    mulli 4, 4, 95
; CHECK32-NEXT:    subf 3, 4, 3
; CHECK32-NEXT:    add 29, 3, 29
; CHECK32-NEXT:    crxor 6, 6, 6
; CHECK32-NEXT:    mr 3, 28
; CHECK32-NEXT:    mr 4, 29
; CHECK32-NEXT:    bl printf
; CHECK32-NEXT:    cmplw 3, 30
; CHECK32-NEXT:    blt 0, .LBB9_1
; CHECK32-NEXT:  # %bb.2: # %afterloop
; CHECK32-NEXT:    lwz 30, 24(1) # 4-byte Folded Reload
; CHECK32-NEXT:    lwz 29, 20(1) # 4-byte Folded Reload
; CHECK32-NEXT:    lwz 28, 16(1) # 4-byte Folded Reload
; CHECK32-NEXT:    lwz 27, 12(1) # 4-byte Folded Reload
; CHECK32-NEXT:    lwz 0, 36(1)
; CHECK32-NEXT:    addi 1, 1, 32
; CHECK32-NEXT:    mtlr 0
; CHECK32-NEXT:    blr
entry:
  %0 = add i32 0, 0
  br label %loop
loop:
  %1 = phi i32 [ 1, %entry ], [ %5, %loop ]
  %2 = phi i32 [%0, %entry], [%4, %loop]
  %3 = srem i32 %1, 95
  %4 = add i32 %3, %2
  %5 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %4)
  %6 = icmp ult i32 %5, %x
  br i1 %6, label %loop, label %afterloop

afterloop:
  ret void
}
