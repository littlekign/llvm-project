; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=powerpc64le-unknown-linux-gnu -mcpu=pwr9 -verify-machineinstrs | FileCheck %s
; RUN: llc < %s -mtriple=powerpc64-unknown-linux-gnu -mcpu=pwr9 -verify-machineinstrs | FileCheck %s
; RUN: llc < %s -mtriple=powerpc64le-unknown-linux-gnu -mcpu=pwr8 | FileCheck %s -check-prefix=CHECK-PWR8 -implicit-check-not mod[us][wd]

@mod_resultsw = local_unnamed_addr global i32 0, align 4
@mod_resultud = local_unnamed_addr global i64 0, align 8
@div_resultsw = local_unnamed_addr global i32 0, align 4
@mod_resultuw = local_unnamed_addr global i32 0, align 4
@div_resultuw = local_unnamed_addr global i32 0, align 4
@div_resultsd = local_unnamed_addr global i64 0, align 8
@mod_resultsd = local_unnamed_addr global i64 0, align 8
@div_resultud = local_unnamed_addr global i64 0, align 8

; Function Attrs: norecurse nounwind
define void @modulo_sw(i32 signext %a, i32 signext %b) local_unnamed_addr {
; CHECK-LABEL: modulo_sw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    modsw 3, 3, 4
; CHECK-NEXT:    addis 4, 2, .LC0@toc@ha
; CHECK-NEXT:    ld 4, .LC0@toc@l(4)
; CHECK-NEXT:    stw 3, 0(4)
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: modulo_sw:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    divw 6, 3, 4
; CHECK-PWR8-NEXT:    addis 5, 2, mod_resultsw@toc@ha
; CHECK-PWR8-NEXT:    mullw 4, 6, 4
; CHECK-PWR8-NEXT:    subf 3, 4, 3
; CHECK-PWR8-NEXT:    stw 3, mod_resultsw@toc@l(5)
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = srem i32 %a, %b
  store i32 %rem, i32* @mod_resultsw, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone
define zeroext i32 @modulo_uw(i32 zeroext %a, i32 zeroext %b) local_unnamed_addr {
; CHECK-LABEL: modulo_uw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    moduw 3, 3, 4
; CHECK-NEXT:    clrldi 3, 3, 32
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: modulo_uw:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    divwu 5, 3, 4
; CHECK-PWR8-NEXT:    mullw 4, 5, 4
; CHECK-PWR8-NEXT:    subf 3, 4, 3
; CHECK-PWR8-NEXT:    clrldi 3, 3, 32
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = urem i32 %a, %b
  ret i32 %rem
}

; Function Attrs: norecurse nounwind readnone
define i64 @modulo_sd(i64 %a, i64 %b) local_unnamed_addr {
; CHECK-LABEL: modulo_sd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    modsd 3, 3, 4
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: modulo_sd:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    divd 5, 3, 4
; CHECK-PWR8-NEXT:    mulld 4, 5, 4
; CHECK-PWR8-NEXT:    sub 3, 3, 4
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = srem i64 %a, %b
  ret i64 %rem
}

; Function Attrs: norecurse nounwind
define void @modulo_ud(i64 %a, i64 %b) local_unnamed_addr {
; CHECK-LABEL: modulo_ud:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    modud 3, 3, 4
; CHECK-NEXT:    addis 4, 2, .LC1@toc@ha
; CHECK-NEXT:    ld 4, .LC1@toc@l(4)
; CHECK-NEXT:    std 3, 0(4)
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: modulo_ud:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    divdu 6, 3, 4
; CHECK-PWR8-NEXT:    addis 5, 2, mod_resultud@toc@ha
; CHECK-PWR8-NEXT:    mulld 4, 6, 4
; CHECK-PWR8-NEXT:    sub 3, 3, 4
; CHECK-PWR8-NEXT:    std 3, mod_resultud@toc@l(5)
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = urem i64 %a, %b
  store i64 %rem, i64* @mod_resultud, align 8
  ret void
}

; Function Attrs: norecurse nounwind
define void @modulo_div_sw(i32 signext %a, i32 signext %b) local_unnamed_addr {
; CHECK-LABEL: modulo_div_sw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    divw 5, 3, 4
; CHECK-NEXT:    mullw 4, 5, 4
; CHECK-NEXT:    subf 3, 4, 3
; CHECK-NEXT:    addis 4, 2, .LC0@toc@ha
; CHECK-NEXT:    ld 4, .LC0@toc@l(4)
; CHECK-NEXT:    stw 3, 0(4)
; CHECK-NEXT:    addis 3, 2, .LC2@toc@ha
; CHECK-NEXT:    ld 3, .LC2@toc@l(3)
; CHECK-NEXT:    stw 5, 0(3)
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: modulo_div_sw:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    divw 6, 3, 4
; CHECK-PWR8-NEXT:    addis 5, 2, mod_resultsw@toc@ha
; CHECK-PWR8-NEXT:    mullw 4, 6, 4
; CHECK-PWR8-NEXT:    subf 3, 4, 3
; CHECK-PWR8-NEXT:    addis 4, 2, div_resultsw@toc@ha
; CHECK-PWR8-NEXT:    stw 3, mod_resultsw@toc@l(5)
; CHECK-PWR8-NEXT:    stw 6, div_resultsw@toc@l(4)
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = srem i32 %a, %b
  store i32 %rem, i32* @mod_resultsw, align 4
  %div = sdiv i32 %a, %b
  store i32 %div, i32* @div_resultsw, align 4
  ret void
}

; Function Attrs: norecurse nounwind
define void @modulo_div_abc_sw(i32 signext %a, i32 signext %b, i32 signext %c) local_unnamed_addr {
; CHECK-LABEL: modulo_div_abc_sw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    modsw 3, 3, 5
; CHECK-NEXT:    addis 6, 2, .LC0@toc@ha
; CHECK-NEXT:    ld 6, .LC0@toc@l(6)
; CHECK-NEXT:    stw 3, 0(6)
; CHECK-NEXT:    divw 3, 4, 5
; CHECK-NEXT:    addis 4, 2, .LC2@toc@ha
; CHECK-NEXT:    ld 4, .LC2@toc@l(4)
; CHECK-NEXT:    stw 3, 0(4)
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: modulo_div_abc_sw:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    divw 7, 3, 5
; CHECK-PWR8-NEXT:    divw 4, 4, 5
; CHECK-PWR8-NEXT:    addis 6, 2, mod_resultsw@toc@ha
; CHECK-PWR8-NEXT:    mullw 5, 7, 5
; CHECK-PWR8-NEXT:    subf 3, 5, 3
; CHECK-PWR8-NEXT:    addis 5, 2, div_resultsw@toc@ha
; CHECK-PWR8-NEXT:    stw 3, mod_resultsw@toc@l(6)
; CHECK-PWR8-NEXT:    stw 4, div_resultsw@toc@l(5)
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = srem i32 %a, %c
  store i32 %rem, i32* @mod_resultsw, align 4
  %div = sdiv i32 %b, %c
  store i32 %div, i32* @div_resultsw, align 4
  ret void
}

; Function Attrs: norecurse nounwind
define void @modulo_div_uw(i32 zeroext %a, i32 zeroext %b) local_unnamed_addr {
; CHECK-LABEL: modulo_div_uw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    divwu 5, 3, 4
; CHECK-NEXT:    mullw 4, 5, 4
; CHECK-NEXT:    subf 3, 4, 3
; CHECK-NEXT:    addis 4, 2, .LC3@toc@ha
; CHECK-NEXT:    ld 4, .LC3@toc@l(4)
; CHECK-NEXT:    stw 3, 0(4)
; CHECK-NEXT:    addis 3, 2, .LC4@toc@ha
; CHECK-NEXT:    ld 3, .LC4@toc@l(3)
; CHECK-NEXT:    stw 5, 0(3)
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: modulo_div_uw:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    divwu 6, 3, 4
; CHECK-PWR8-NEXT:    addis 5, 2, mod_resultuw@toc@ha
; CHECK-PWR8-NEXT:    mullw 4, 6, 4
; CHECK-PWR8-NEXT:    subf 3, 4, 3
; CHECK-PWR8-NEXT:    addis 4, 2, div_resultuw@toc@ha
; CHECK-PWR8-NEXT:    stw 3, mod_resultuw@toc@l(5)
; CHECK-PWR8-NEXT:    stw 6, div_resultuw@toc@l(4)
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = urem i32 %a, %b
  store i32 %rem, i32* @mod_resultuw, align 4
  %div = udiv i32 %a, %b
  store i32 %div, i32* @div_resultuw, align 4
  ret void
}

; Function Attrs: norecurse nounwind
define void @modulo_div_swuw(i32 signext %a, i32 signext %b) local_unnamed_addr {
; CHECK-LABEL: modulo_div_swuw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    modsw 5, 3, 4
; CHECK-NEXT:    addis 6, 2, .LC0@toc@ha
; CHECK-NEXT:    ld 6, .LC0@toc@l(6)
; CHECK-NEXT:    stw 5, 0(6)
; CHECK-NEXT:    divwu 3, 3, 4
; CHECK-NEXT:    addis 4, 2, .LC2@toc@ha
; CHECK-NEXT:    ld 4, .LC2@toc@l(4)
; CHECK-NEXT:    stw 3, 0(4)
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: modulo_div_swuw:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    divw 6, 3, 4
; CHECK-PWR8-NEXT:    divwu 7, 3, 4
; CHECK-PWR8-NEXT:    addis 5, 2, mod_resultsw@toc@ha
; CHECK-PWR8-NEXT:    mullw 4, 6, 4
; CHECK-PWR8-NEXT:    subf 3, 4, 3
; CHECK-PWR8-NEXT:    addis 4, 2, div_resultsw@toc@ha
; CHECK-PWR8-NEXT:    stw 3, mod_resultsw@toc@l(5)
; CHECK-PWR8-NEXT:    stw 7, div_resultsw@toc@l(4)
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = srem i32 %a, %b
  store i32 %rem, i32* @mod_resultsw, align 4
  %div = udiv i32 %a, %b
  store i32 %div, i32* @div_resultsw, align 4
  ret void
}

; Function Attrs: norecurse nounwind
define void @modulo_div_udsd(i64 %a, i64 %b) local_unnamed_addr {
; CHECK-LABEL: modulo_div_udsd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    modud 5, 3, 4
; CHECK-NEXT:    addis 6, 2, .LC1@toc@ha
; CHECK-NEXT:    ld 6, .LC1@toc@l(6)
; CHECK-NEXT:    std 5, 0(6)
; CHECK-NEXT:    divd 3, 3, 4
; CHECK-NEXT:    addis 4, 2, .LC5@toc@ha
; CHECK-NEXT:    ld 4, .LC5@toc@l(4)
; CHECK-NEXT:    std 3, 0(4)
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: modulo_div_udsd:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    divdu 6, 3, 4
; CHECK-PWR8-NEXT:    divd 7, 3, 4
; CHECK-PWR8-NEXT:    addis 5, 2, mod_resultud@toc@ha
; CHECK-PWR8-NEXT:    mulld 4, 6, 4
; CHECK-PWR8-NEXT:    sub 3, 3, 4
; CHECK-PWR8-NEXT:    addis 4, 2, div_resultsd@toc@ha
; CHECK-PWR8-NEXT:    std 3, mod_resultud@toc@l(5)
; CHECK-PWR8-NEXT:    std 7, div_resultsd@toc@l(4)
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = urem i64 %a, %b
  store i64 %rem, i64* @mod_resultud, align 8
  %div = sdiv i64 %a, %b
  store i64 %div, i64* @div_resultsd, align 8
  ret void
}

; Function Attrs: norecurse nounwind
define void @modulo_const32_sw(i32 signext %a) local_unnamed_addr {
; CHECK-LABEL: modulo_const32_sw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sldi 4, 3, 59
; CHECK-NEXT:    add 4, 3, 4
; CHECK-NEXT:    li 5, 32
; CHECK-NEXT:    mulhd 4, 4, 5
; CHECK-NEXT:    srawi 3, 3, 31
; CHECK-NEXT:    clrlwi 3, 3, 27
; CHECK-NEXT:    subf 3, 3, 4
; CHECK-NEXT:    addis 4, 2, .LC0@toc@ha
; CHECK-NEXT:    ld 4, .LC0@toc@l(4)
; CHECK-NEXT:    stw 3, 0(4)
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: modulo_const32_sw:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    sldi 5, 3, 59
; CHECK-PWR8-NEXT:    li 4, 32
; CHECK-PWR8-NEXT:    add 5, 3, 5
; CHECK-PWR8-NEXT:    srawi 3, 3, 31
; CHECK-PWR8-NEXT:    mulhd 4, 5, 4
; CHECK-PWR8-NEXT:    clrlwi 3, 3, 27
; CHECK-PWR8-NEXT:    subf 3, 3, 4
; CHECK-PWR8-NEXT:    addis 4, 2, mod_resultsw@toc@ha
; CHECK-PWR8-NEXT:    stw 3, mod_resultsw@toc@l(4)
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = srem i32 %a, 32
  store i32 %rem, i32* @mod_resultsw, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone
define signext i32 @modulo_const3_sw(i32 signext %a) local_unnamed_addr {
; CHECK-LABEL: modulo_const3_sw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lis 4, 21845
; CHECK-NEXT:    ori 4, 4, 21845
; CHECK-NEXT:    sldi 4, 4, 32
; CHECK-NEXT:    oris 4, 4, 21845
; CHECK-NEXT:    ori 4, 4, 21846
; CHECK-NEXT:    mulld 4, 3, 4
; CHECK-NEXT:    li 5, 3
; CHECK-NEXT:    mulhd 4, 4, 5
; CHECK-NEXT:    rlwinm 3, 3, 2, 30, 30
; CHECK-NEXT:    subf 3, 3, 4
; CHECK-NEXT:    extsw 3, 3
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: modulo_const3_sw:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    lis 4, 21845
; CHECK-PWR8-NEXT:    li 5, 3
; CHECK-PWR8-NEXT:    ori 4, 4, 21845
; CHECK-PWR8-NEXT:    sldi 4, 4, 32
; CHECK-PWR8-NEXT:    oris 4, 4, 21845
; CHECK-PWR8-NEXT:    ori 4, 4, 21846
; CHECK-PWR8-NEXT:    mulld 4, 3, 4
; CHECK-PWR8-NEXT:    rlwinm 3, 3, 2, 30, 30
; CHECK-PWR8-NEXT:    mulhd 4, 4, 5
; CHECK-PWR8-NEXT:    subf 3, 3, 4
; CHECK-PWR8-NEXT:    extsw 3, 3
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = srem i32 %a, 3
  ret i32 %rem
}

; Function Attrs: norecurse nounwind readnone
define signext i32 @const2_modulo_sw(i32 signext %a) local_unnamed_addr {
; CHECK-LABEL: const2_modulo_sw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    li 4, 2
; CHECK-NEXT:    modsw 3, 4, 3
; CHECK-NEXT:    extsw 3, 3
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: const2_modulo_sw:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    li 4, 2
; CHECK-PWR8-NEXT:    divw 4, 4, 3
; CHECK-PWR8-NEXT:    mullw 3, 4, 3
; CHECK-PWR8-NEXT:    subfic 3, 3, 2
; CHECK-PWR8-NEXT:    extsw 3, 3
; CHECK-PWR8-NEXT:    blr
entry:
  %rem = srem i32 2, %a
  ret i32 %rem
}

; Function Attrs: norecurse nounwind
; FIXME On power 9 this test will still produce modsw because the divide is in
; a different block than the remainder. Due to the nature of the SDAG we cannot
; see the div in the other block.
define void @blocks_modulo_div_sw(i32 signext %a, i32 signext %b, i32 signext %c) local_unnamed_addr {
; CHECK-LABEL: blocks_modulo_div_sw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    divw 6, 3, 4
; CHECK-NEXT:    addis 7, 2, .LC2@toc@ha
; CHECK-NEXT:    ld 7, .LC2@toc@l(7)
; CHECK-NEXT:    cmpwi 0, 5, 1
; CHECK-NEXT:    stw 6, 0(7)
; CHECK-NEXT:    bltlr 0
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    modsw 3, 3, 4
; CHECK-NEXT:    addis 4, 2, .LC0@toc@ha
; CHECK-NEXT:    ld 4, .LC0@toc@l(4)
; CHECK-NEXT:    stw 3, 0(4)
; CHECK-NEXT:    blr
;
; CHECK-PWR8-LABEL: blocks_modulo_div_sw:
; CHECK-PWR8:       # %bb.0: # %entry
; CHECK-PWR8-NEXT:    divw 6, 3, 4
; CHECK-PWR8-NEXT:    cmpwi 0, 5, 1
; CHECK-PWR8-NEXT:    addis 5, 2, div_resultsw@toc@ha
; CHECK-PWR8-NEXT:    stw 6, div_resultsw@toc@l(5)
; CHECK-PWR8-NEXT:    bltlr 0
; CHECK-PWR8-NEXT:  # %bb.1: # %if.then
; CHECK-PWR8-NEXT:    mullw 4, 6, 4
; CHECK-PWR8-NEXT:    addis 5, 2, mod_resultsw@toc@ha
; CHECK-PWR8-NEXT:    subf 3, 4, 3
; CHECK-PWR8-NEXT:    addi 4, 5, mod_resultsw@toc@l
; CHECK-PWR8-NEXT:    stw 3, 0(4)
; CHECK-PWR8-NEXT:    blr
entry:
  %div = sdiv i32 %a, %b
  store i32 %div, i32* @div_resultsw, align 4
  %cmp = icmp sgt i32 %c, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %rem = srem i32 %a, %b
  store i32 %rem, i32* @mod_resultsw, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}


