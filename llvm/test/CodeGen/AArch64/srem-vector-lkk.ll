; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=aarch64-unknown-linux-gnu < %s | FileCheck %s

define <4 x i16> @lower_srem_vec_1(<4 x i16> %x) {
; CHECK-LABEL: lower_srem_vec_1:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI0_0
; CHECK-NEXT:    ldr q1, [x8, :lo12:.LCPI0_0]
; CHECK-NEXT:    adrp x8, .LCPI0_1
; CHECK-NEXT:    ldr q2, [x8, :lo12:.LCPI0_1]
; CHECK-NEXT:    sshll v3.4s, v0.4h, #0
; CHECK-NEXT:    adrp x8, .LCPI0_2
; CHECK-NEXT:    mul v1.4s, v3.4s, v1.4s
; CHECK-NEXT:    umull2 v3.2d, v1.4s, v2.4s
; CHECK-NEXT:    umull v1.2d, v1.2s, v2.2s
; CHECK-NEXT:    ldr d2, [x8, :lo12:.LCPI0_2]
; CHECK-NEXT:    sshr v0.4h, v0.4h, #15
; CHECK-NEXT:    uzp2 v1.4s, v1.4s, v3.4s
; CHECK-NEXT:    xtn v1.4h, v1.4s
; CHECK-NEXT:    and v0.8b, v0.8b, v2.8b
; CHECK-NEXT:    sub v0.4h, v1.4h, v0.4h
; CHECK-NEXT:    ret
  %1 = srem <4 x i16> %x, <i16 95, i16 -124, i16 98, i16 -1003>
  ret <4 x i16> %1
}

define <4 x i16> @lower_srem_vec_2(<4 x i16> %x) {
; CHECK-LABEL: lower_srem_vec_2:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w8, #55879
; CHECK-NEXT:    movk w8, #689, lsl #16
; CHECK-NEXT:    sshll v1.4s, v0.4h, #0
; CHECK-NEXT:    dup v4.4s, w8
; CHECK-NEXT:    movi v2.4s, #95
; CHECK-NEXT:    mul v1.4s, v1.4s, v4.4s
; CHECK-NEXT:    umull2 v4.2d, v1.4s, v2.4s
; CHECK-NEXT:    umull v1.2d, v1.2s, v2.2s
; CHECK-NEXT:    sshr v0.4h, v0.4h, #15
; CHECK-NEXT:    movi v3.4h, #94
; CHECK-NEXT:    uzp2 v1.4s, v1.4s, v4.4s
; CHECK-NEXT:    xtn v1.4h, v1.4s
; CHECK-NEXT:    and v0.8b, v0.8b, v3.8b
; CHECK-NEXT:    sub v0.4h, v1.4h, v0.4h
; CHECK-NEXT:    ret
  %1 = srem <4 x i16> %x, <i16 95, i16 95, i16 95, i16 95>
  ret <4 x i16> %1
}


; Don't lower if we can combine srem with sdiv.
define <4 x i16> @combine_srem_sdiv(<4 x i16> %x) {
; CHECK-LABEL: combine_srem_sdiv:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w8, #37253
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $q0
; CHECK-NEXT:    movk w8, #44150, lsl #16
; CHECK-NEXT:    smov w9, v0.h[1]
; CHECK-NEXT:    smov w10, v0.h[0]
; CHECK-NEXT:    smull x13, w9, w8
; CHECK-NEXT:    smov w11, v0.h[2]
; CHECK-NEXT:    smull x14, w10, w8
; CHECK-NEXT:    lsr x13, x13, #32
; CHECK-NEXT:    smov w12, v0.h[3]
; CHECK-NEXT:    smull x15, w11, w8
; CHECK-NEXT:    lsr x14, x14, #32
; CHECK-NEXT:    add w13, w13, w9
; CHECK-NEXT:    smull x8, w12, w8
; CHECK-NEXT:    lsr x15, x15, #32
; CHECK-NEXT:    add w14, w14, w10
; CHECK-NEXT:    asr w16, w13, #6
; CHECK-NEXT:    lsr x8, x8, #32
; CHECK-NEXT:    add w15, w15, w11
; CHECK-NEXT:    add w13, w16, w13, lsr #31
; CHECK-NEXT:    asr w16, w14, #6
; CHECK-NEXT:    add w8, w8, w12
; CHECK-NEXT:    add w14, w16, w14, lsr #31
; CHECK-NEXT:    asr w16, w15, #6
; CHECK-NEXT:    add w15, w16, w15, lsr #31
; CHECK-NEXT:    asr w16, w8, #6
; CHECK-NEXT:    add w8, w16, w8, lsr #31
; CHECK-NEXT:    mov w16, #95
; CHECK-NEXT:    msub w10, w14, w16, w10
; CHECK-NEXT:    msub w9, w13, w16, w9
; CHECK-NEXT:    fmov s0, w14
; CHECK-NEXT:    fmov s1, w10
; CHECK-NEXT:    msub w11, w15, w16, w11
; CHECK-NEXT:    mov v0.h[1], w13
; CHECK-NEXT:    mov v1.h[1], w9
; CHECK-NEXT:    msub w12, w8, w16, w12
; CHECK-NEXT:    mov v0.h[2], w15
; CHECK-NEXT:    mov v1.h[2], w11
; CHECK-NEXT:    mov v1.h[3], w12
; CHECK-NEXT:    mov v0.h[3], w8
; CHECK-NEXT:    add v0.4h, v1.4h, v0.4h
; CHECK-NEXT:    ret
  %1 = srem <4 x i16> %x, <i16 95, i16 95, i16 95, i16 95>
  %2 = sdiv <4 x i16> %x, <i16 95, i16 95, i16 95, i16 95>
  %3 = add <4 x i16> %1, %2
  ret <4 x i16> %3
}

; Don't lower for divisors that are a power of two.
define <4 x i16> @dont_lower_srem_power_of_two(<4 x i16> %x) {
; CHECK-LABEL: dont_lower_srem_power_of_two:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI3_0
; CHECK-NEXT:    ldr q1, [x8, :lo12:.LCPI3_0]
; CHECK-NEXT:    adrp x8, .LCPI3_1
; CHECK-NEXT:    ldr q2, [x8, :lo12:.LCPI3_1]
; CHECK-NEXT:    sshll v3.4s, v0.4h, #0
; CHECK-NEXT:    adrp x8, .LCPI3_2
; CHECK-NEXT:    mul v1.4s, v3.4s, v1.4s
; CHECK-NEXT:    umull2 v3.2d, v1.4s, v2.4s
; CHECK-NEXT:    umull v1.2d, v1.2s, v2.2s
; CHECK-NEXT:    ldr d2, [x8, :lo12:.LCPI3_2]
; CHECK-NEXT:    sshr v0.4h, v0.4h, #15
; CHECK-NEXT:    uzp2 v1.4s, v1.4s, v3.4s
; CHECK-NEXT:    xtn v1.4h, v1.4s
; CHECK-NEXT:    and v0.8b, v0.8b, v2.8b
; CHECK-NEXT:    sub v0.4h, v1.4h, v0.4h
; CHECK-NEXT:    ret
  %1 = srem <4 x i16> %x, <i16 64, i16 32, i16 8, i16 95>
  ret <4 x i16> %1
}

; Don't lower if the divisor is one.
define <4 x i16> @dont_lower_srem_one(<4 x i16> %x) {
; CHECK-LABEL: dont_lower_srem_one:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI4_0
; CHECK-NEXT:    ldr q1, [x8, :lo12:.LCPI4_0]
; CHECK-NEXT:    adrp x8, .LCPI4_1
; CHECK-NEXT:    ldr q2, [x8, :lo12:.LCPI4_1]
; CHECK-NEXT:    sshll v3.4s, v0.4h, #0
; CHECK-NEXT:    adrp x8, .LCPI4_2
; CHECK-NEXT:    mul v1.4s, v3.4s, v1.4s
; CHECK-NEXT:    umull2 v3.2d, v1.4s, v2.4s
; CHECK-NEXT:    umull v1.2d, v1.2s, v2.2s
; CHECK-NEXT:    ldr d2, [x8, :lo12:.LCPI4_2]
; CHECK-NEXT:    sshr v0.4h, v0.4h, #15
; CHECK-NEXT:    uzp2 v1.4s, v1.4s, v3.4s
; CHECK-NEXT:    xtn v1.4h, v1.4s
; CHECK-NEXT:    and v0.8b, v0.8b, v2.8b
; CHECK-NEXT:    sub v0.4h, v1.4h, v0.4h
; CHECK-NEXT:    ret
  %1 = srem <4 x i16> %x, <i16 1, i16 654, i16 23, i16 5423>
  ret <4 x i16> %1
}

; Don't lower if the divisor is 2^15.
define <4 x i16> @dont_lower_srem_i16_smax(<4 x i16> %x) {
; CHECK-LABEL: dont_lower_srem_i16_smax:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x11, #45591
; CHECK-NEXT:    movk x11, #34192, lsl #16
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $q0
; CHECK-NEXT:    smov w9, v0.h[2]
; CHECK-NEXT:    mov w10, #22
; CHECK-NEXT:    movk x11, #25644, lsl #32
; CHECK-NEXT:    movk x11, #2849, lsl #48
; CHECK-NEXT:    and w10, w10, w9, asr #31
; CHECK-NEXT:    sxtw x9, w9
; CHECK-NEXT:    mul x9, x9, x11
; CHECK-NEXT:    mov x11, #48291
; CHECK-NEXT:    movk x11, #1244, lsl #16
; CHECK-NEXT:    smov w12, v0.h[3]
; CHECK-NEXT:    mov w13, #5422
; CHECK-NEXT:    movk x11, #5559, lsl #32
; CHECK-NEXT:    movk x11, #12, lsl #48
; CHECK-NEXT:    and w13, w13, w12, asr #31
; CHECK-NEXT:    sxtw x12, w12
; CHECK-NEXT:    mul x11, x12, x11
; CHECK-NEXT:    mov w12, #23
; CHECK-NEXT:    umulh x9, x9, x12
; CHECK-NEXT:    mov w12, #5423
; CHECK-NEXT:    smov w8, v0.h[1]
; CHECK-NEXT:    umulh x11, x11, x12
; CHECK-NEXT:    mov w12, #32767
; CHECK-NEXT:    add w12, w8, w12
; CHECK-NEXT:    cmp w8, #0 // =0
; CHECK-NEXT:    csel w12, w12, w8, lt
; CHECK-NEXT:    and w12, w12, #0xffff8000
; CHECK-NEXT:    sub w8, w8, w12
; CHECK-NEXT:    movi d0, #0000000000000000
; CHECK-NEXT:    sub w9, w9, w10
; CHECK-NEXT:    mov v0.h[1], w8
; CHECK-NEXT:    mov v0.h[2], w9
; CHECK-NEXT:    sub w8, w11, w13
; CHECK-NEXT:    mov v0.h[3], w8
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $q0
; CHECK-NEXT:    ret
  %1 = srem <4 x i16> %x, <i16 1, i16 32768, i16 23, i16 5423>
  ret <4 x i16> %1
}

; Don't lower i64 srem.
define <4 x i64> @dont_lower_srem_i64(<4 x i64> %x) {
; CHECK-LABEL: dont_lower_srem_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x9, #6055
; CHECK-NEXT:    movk x9, #58853, lsl #16
; CHECK-NEXT:    movk x9, #47142, lsl #32
; CHECK-NEXT:    mov x8, v1.d[1]
; CHECK-NEXT:    movk x9, #24749, lsl #48
; CHECK-NEXT:    smulh x9, x8, x9
; CHECK-NEXT:    asr x12, x9, #11
; CHECK-NEXT:    mov w10, #5423
; CHECK-NEXT:    add x9, x12, x9, lsr #63
; CHECK-NEXT:    msub x8, x9, x10, x8
; CHECK-NEXT:    mov x9, #21445
; CHECK-NEXT:    movk x9, #1603, lsl #16
; CHECK-NEXT:    movk x9, #15432, lsl #32
; CHECK-NEXT:    mov x12, v0.d[1]
; CHECK-NEXT:    movk x9, #25653, lsl #48
; CHECK-NEXT:    smulh x9, x12, x9
; CHECK-NEXT:    asr x10, x9, #8
; CHECK-NEXT:    add x9, x10, x9, lsr #63
; CHECK-NEXT:    mov w10, #654
; CHECK-NEXT:    msub x9, x9, x10, x12
; CHECK-NEXT:    mov x10, #8549
; CHECK-NEXT:    movk x10, #22795, lsl #16
; CHECK-NEXT:    movk x10, #17096, lsl #32
; CHECK-NEXT:    fmov x11, d1
; CHECK-NEXT:    movk x10, #45590, lsl #48
; CHECK-NEXT:    smulh x10, x11, x10
; CHECK-NEXT:    add x10, x10, x11
; CHECK-NEXT:    asr x12, x10, #4
; CHECK-NEXT:    add x10, x12, x10, lsr #63
; CHECK-NEXT:    mov w12, #23
; CHECK-NEXT:    msub x10, x10, x12, x11
; CHECK-NEXT:    movi v0.2d, #0000000000000000
; CHECK-NEXT:    fmov d1, x10
; CHECK-NEXT:    mov v1.d[1], x8
; CHECK-NEXT:    mov v0.d[1], x9
; CHECK-NEXT:    ret
  %1 = srem <4 x i64> %x, <i64 1, i64 654, i64 23, i64 5423>
  ret <4 x i64> %1
}
